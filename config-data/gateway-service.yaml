# Parte 1. Definimos el puerto de este microservicio

server:
  port: 8080

# Parte 2. Configuracion de Eureka

eureka:
  client:
    fetch-registry: true
    register-with-eureka: true  # Este servicio se va a registrar en Eureka
    service-url:
      default-zone: http://localhost:8761/eureka  # Servidor Eureka
  instance:
    hostname: localhost   # Ip del servicio

# Parte 3. Configuracion de Spring Cloud Gateway
# lb = load balancer
#spring:
#  cloud:
#    gateway:
#      discovery:
#        locator:
#          enabled: true
#      routes:
#        - id: user-service
#          uri: lb://user-service
#          predicates:
#            - Path=/user/**          
#        - id: car-service
#          uri: lb://car-service
#          predicates:
#            - Path=/car/**
#        - id: bike-service
#          uri: lb://bike-service
#          predicates:
#            - Path=/bike/**

# Parte 4. Configuracion de Keycloak

# default-filters: - TokenRelay   -> Para Keycloak
# Es el patron que implementaremos. Gateway enviara tokens a los recursos protegidos (user-service)

# La parte de security es tambien para keycloak
# Los datos se obtienen de keycloak, del json en "OpenID Endpoint Configuration"
# client-secret se obtiene de la pesta√±a "Credentials" en el cliente que se creo en keycloak
# redirect-uri tambien se saca del cliente que se creo en keycloak (Valid redirect URIs)

# Nota: en produccion no seria correcto tener estas claves en un repo publico, puede ser privado
# Tal vez deban ir en el bootstrap.yaml propio del gateway-service
# O en un servidor para almacenar esas claves. Eso no se trata en el video.

spring:
  cloud:
    gateway:
      default-filters:
        - TokenRelay
      discovery:
        locator:
          enabled: true
      routes:
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/user/**
          filters:
            - RemoveRequestHeader=Cookie
        - id: car-service
          uri: lb://car-service
          predicates:
            - Path=/car/**
        - id: bike-service
          uri: lb://bike-service
          predicates:
            - Path=/bike/**
  security:
    oauth2:
      client:
        provider:
          keycloak:
            authorization-uri: http://localhost:8180/realms/kenobi-realm/protocol/openid-connect/auth
            userinfo-uri: http://localhost:8180/realms/kenobi-realm/protocol/openid-connect/userinfo
            user-name-attribute: preferred_username
            token-uri: http://localhost:8180/realms/kenobi-realm/protocol/openid-connect/token
            issuer-uri: http://localhost:8180/realms/kenobi-realm
            jwk-set-uri: http://localhost:8180/realms/kenobi-realm/protocol/openid-connect/certs
        registration:
          kenobi-client:
            provider: keycloak
            client-id: kenobi-client
            client-secret: YPr1zOYE4zFkIP50WJPicUCoFzCOdEMw
            scope: openid
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kenobi-client"